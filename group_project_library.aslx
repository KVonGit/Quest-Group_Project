<library>
  <command name="TravelToHub">
    <pattern>travel;t</pattern>
    <script>
      if (GetBoolean(player.parent, "gateway") or player.cantravelfromanywhere) {
        TravelToDimension(hub)
      }
      else {
        msg ("You can't travel from here.")
      }
    </script>
    <travelmsg><![CDATA[<span class='travel-msg'>You travel in some unspecified manner...</span>]]></travelmsg>
  </command>

  <!-- added by rh for testing / removed initials from name 9/1/17 rh -->
  <command name="showme">
    <pattern>showme</pattern>
	<script>
	  msg (GetAllChildObjects(player.parent))
	</script>
  </command>
  
  <function name="TravelToDimension" parameters="room">
    msg (TravelToHub.travelmsg)
    player.parent = room
    player.dimension = room
    game.customlocationcolour = room.locationcolour
    game.customlocationtextcolour = room.locationtextcolour
    game.customlocationbordercolour = room.locationbordercolour
    JS.setCss("#status", "color:" + game.customlocationtextcolour)
    JS.setCss("#status", "background-color:" + game.customlocationcolour)
    JS.setCss("#status", "border:" + game.customlocationbordercolour)
  </function>
  



  <turnscript name="dimensionturnscript">
    <enabled />
    <script>
	  if (HasAttribute(player.dimension, "turn")) {
        if (HasScript(player.dimension, "turn")) {
          do (player.dimension, "turn")
        }
	  }
    </script>
  </turnscript>

  
  <function name="AddToHubGateway" parameters="room">
    name = room.name + "_destination"
    if (not GetObject(name) = null) error ("Something has gone wrong, and a destination is being added to the hub a second time.")
    create (name)
    obj = GetObject (name)
    obj.parent = destinations
    obj.look = room.dimensiondescription
    obj.alias = room.dimensionname
    obj.to = room
    obj.linkcolour = room.dimensioncolour
  </function>
  
  <function name="DescribePlayer">
    msg ("Looking good...")
    msg ("As a {either player.isfemale:female|male} {player.race}.")
  </function>

  <function name="DescribeHub"><![CDATA[
	msg ("This is the hub, the starting point of your adventure!")
	msg ("<br/><center><b>[ ENTER 'T' OR 'TRAVEL' TO SELECT A DESTINATION ]</b></center>")
	]]>
    
  </function>

  <function name="StartScript"><![CDATA[
    if (not (game.combined)) {
      msg ("[This is NOT the full version!]")
      msg ("")
    }
    game.classiclocation = false
    hub.locationcolour = game.customlocationcolour
    hub.locationtextcolour = game.customlocationtextcolour
    hub.locationbordercolour = game.customlocationbordercolour
  ]]></function>

  <function name="HubEnterScript"><![CDATA[
	msg ("")
    msg ("So this is the hub...")
    player.cantravelfromanywhere = false
  ]]></function>

  <function name="StartMeElsewhere" parameters="obj, roomname">
    room = GetObject(roomname)
    if (room = null) {
      obj.parent = hub
    }
    else {
      obj.parent = room
    }
  </function>

  
  <function name="IsDimensionCompleted" parameters="gateway" type="boolean">
    return (gateway.completed)
  </function>
  
  <function name="AreAllDimensionsCompleted" type="boolean">
    flag = true
    foreach (obj, GetDirectChildren(destinations)) {
      if (not obj.to.completed) {
        flag = false
      }
    }
    return (flag)
  </function>
  
  <function name="DimensionComplete" parameters="gateway">
    gateway.completed = true
  </function>
  
  <!-- ShowMenu modified by KV with some code from mrangel  -->
  
  <function name="ShowMenu" parameters="caption, options, allowCancel, callback"><![CDATA[
    if (GetBoolean(game, "enablehyperlinks")){
		outputsection = StartNewOutputSection()
		msg (caption)
		count = 0
		game.menuoptionskeys = NewStringList()
		game.menudisplayedoptions = NewStringDictionary()
		foreach (option, options) {
		  count = count + 1
		  if (TypeOf(options) = "stringdictionary") {
			optionText = StringDictionaryItem(options, option)
			optiontag = option
			style = GetCurrentLinkTextFormat()
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "string") {
			optionText = option
			optiontag = option
			style = GetCurrentLinkTextFormat()
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "object") {
			optionText = GetDisplayAlias(option)
			optiontag = option.name
			colour = ""
			if (HasString(option, "linkcolour") and GetUIOption("UseGameColours") = "true") {
			  colour = option.linkcolour
			}
			else {
			  colour = GetLinkTextColour()
			}
			style = GetCurrentTextFormat(colour)
			list add (game.menuoptionskeys, option.name)
		  }
		  else {
			error ("ShowMenu cannot handle a " + TypeOf(option))
		  }
		  dictionary add (game.menudisplayedoptions, optiontag, optionText)
		  msg (count + ": <a class=\"cmdlink\" style=\"" + style + "\" onclick=\"ASLEvent('ShowMenuResponse','" + EscapeQuotes(optiontag) + "')\">" + optionText + "</a>")
		}
		EndOutputSection (outputsection)
		game.menuoptions = options
		game.menuallowcancel = allowCancel
		game.menucallback = callback
		game.menuoutputsection = outputsection
	}
	else{
		outputsection = StartNewOutputSection()
		msg (caption)
		count = 0
		game.menuoptionskeys = NewStringList()
		game.menudisplayedoptions = NewStringDictionary()
		foreach (option, options) {
		  count = count + 1
		  if (TypeOf(options) = "stringdictionary") {
			optionText = StringDictionaryItem(options, option)
			optiontag = option
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "string") {
			optionText = option
			optiontag = option
			list add (game.menuoptionskeys, option)
		  }
		  else if (TypeOf(option) = "object") {
			optionText = GetDisplayAlias(option)
			optiontag = option.name
			list add (game.menuoptionskeys, option.name)
		  }
		  else {
			error ("ShowMenu cannot handle a " + TypeOf(option))
		  }
		  dictionary add (game.menudisplayedoptions, optiontag, optionText)
		  msg (count + ": " + optionText)
		}
		EndOutputSection (outputsection)
		game.menuoptions = options
		game.menuallowcancel = allowCancel
		game.menucallback = callback
		game.menuoutputsection = outputsection
	}
  ]]></function>
  
  
  <function name="HandleMenuTextResponse" parameters="input" type="boolean"><![CDATA[
    handled = false
    if (IsInt(input)) {
      number = ToInt(input)
      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {
        handled = true
        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))
      }
    }
    else if (HasAttribute(game, "menudisplayedoptions")) {
      foreach (option, game.menudisplayedoptions) {
        opt = LCase(Trim(StringDictionaryItem(game.menudisplayedoptions, option)))
        answer = LCase(Trim(input))
        if (opt = answer) {
          ShowMenuResponse (option)
          return (true)
        }
        else if (GetBoolean(game,"asking")) {
          if (answer = "y") {
            ShowMenuResponse ("Yes")
            game.asking = false
            return (true)
          }
          else if (answer = "n") {
            ShowMenuResponse ("No")
            game.asking = false
            return (true)
          }
        }
      }
    }
    return (handled)
  ]]></function>

  <function name="ClearMenu">
    HideOutputSection (game.menuoutputsection)
    game.menuoutputsection = null
    game.menuoptions = null
    game.menudisplayedoptions = null
    game.menucallback = null
  </function>
  
  <verb name="enter_verb">
    <pattern>enter #object#;get in #object#;get into #object#</pattern>
    <property>enter_verb</property>
    <defaultexpression>"You can't enter "+object.article+"."</defaultexpression>
    <scope>notheld</scope>
  </verb>
  
  <function name="GetDisplayNameLink" parameters="obj, type" type="string"><![CDATA[
    verbs = GetDisplayVerbs(obj)
    if (verbs <> null) {
      verbCount = ListCount(verbs)
    }
    else {
      verbCount = 0
    }
    if (type = "exit" and verbCount = 1) {
      if (not game.enablehyperlinks) {
        result = GetDisplayAlias(obj)
      }
      else {
        result = "{exit:" + obj.name + "}"
      }
    }
    else if (type = "") {
      result = GetDisplayAlias(obj)
      if (not HasAttribute(game,"lastobjects")) {
        game.lastobjects = NewObjectList()
      }
      if (not obj = game.pov.parent) {
        list add (game.lastobjects, obj)
      }
    }
    else {
      result = "{object:" + obj.name + "}"
      if (not HasAttribute(game,"lastobjects")) {
        game.lastobjects = NewObjectList()
      }
      list add (game.lastobjects, obj)
    }
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else if (type = "exit") {
      prefix = ""
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    result = prefix + result
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]></function>

  <function name="ObjectLink" parameters="obj" type="string">
    game.lastobjects = NewObjectList()
    list add (game.lastobjects, obj)
    return ("{object:" + obj.name + "}")
  </function>
  
  <function name="OnlineCheck" type="boolean"><![CDATA[
    s = " " + 0.1
    return (Instr(s, ",") > 0)
  ]]></function>
  
  
  <command name="savecmd">
    <pattern>save</pattern>
    <script><![CDATA[
      if(OnlineCheck()){
        JS.saveGame()
      }
      else{
        request (RequestSave, "")
      }
    ]]></script>
  </command>
  
  <type name="gateway_type">
    <completed type="boolean">false</completed>
  </type>
  
  <!-- Interface -->
  <tab>
    <parent>_ObjectEditor</parent>
    <caption>Gateway</caption>
    <mustinherit>gateway_type</mustinherit>

    <control>
      <caption>Dimension name</caption>
      <controltype>textbox</controltype>
      <attribute>dimensionname</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>This will appear in the list of destinations when travelling from the hub</caption>
    </control>

    <control>
      <caption>Dimension description</caption>
      <controltype>richtext</controltype>
      <attribute>dimensiondescription</attribute>
    </control>

    <control>
      <caption>Start script</caption>
      <controltype>script</controltype>
      <attribute>_initialise_</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>This will run when the game starts. The first line must be "AddToHubGateway (this)"</caption>
    </control>

    <control>
      <caption>Turn script</caption>
      <controltype>script</controltype>
      <attribute>turn</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>This will run each turn the player is in this dimension</caption>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <caption>Link colour (when travelling from hub)</caption>
      <attribute>dimensioncolour</attribute>
      <validvalues type="simplestringlist">[HTMLColorNames]</validvalues>
      <freetext/>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <caption>Status bar colour</caption>
      <attribute>locationcolour</attribute>
      <validvalues type="simplestringlist">[HTMLColorNames]</validvalues>
      <freetext/>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <caption>Status bat text</caption>
      <attribute>locationtextcolour</attribute>
      <validvalues type="simplestringlist">[HTMLColorNames]</validvalues>
      <freetext/>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <caption>Status bar border</caption>
      <attribute>locationbordercolour</attribute>
      <validvalues type="simplestringlist">[HTMLColorNames]</validvalues>
      <freetext/>
    </control>

  </tab>    
  
  
</library>
